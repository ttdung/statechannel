// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: statechannel/hashlock.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Hashlock struct {
	Index  string      `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	From   string      `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To     string      `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Amount *types.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	Hash   string      `protobuf:"bytes,5,opt,name=hash,proto3" json:"hash,omitempty"`
}

func (m *Hashlock) Reset()         { *m = Hashlock{} }
func (m *Hashlock) String() string { return proto.CompactTextString(m) }
func (*Hashlock) ProtoMessage()    {}
func (*Hashlock) Descriptor() ([]byte, []int) {
	return fileDescriptor_63210f2cf5891c5d, []int{0}
}
func (m *Hashlock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Hashlock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Hashlock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Hashlock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Hashlock.Merge(m, src)
}
func (m *Hashlock) XXX_Size() int {
	return m.Size()
}
func (m *Hashlock) XXX_DiscardUnknown() {
	xxx_messageInfo_Hashlock.DiscardUnknown(m)
}

var xxx_messageInfo_Hashlock proto.InternalMessageInfo

func (m *Hashlock) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Hashlock) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Hashlock) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Hashlock) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Hashlock) GetHash() string {
	if m != nil {
		return m.Hash
	}
	return ""
}

func init() {
	proto.RegisterType((*Hashlock)(nil), "ttdung.statechannel.statechannel.Hashlock")
}

func init() { proto.RegisterFile("statechannel/hashlock.proto", fileDescriptor_63210f2cf5891c5d) }

var fileDescriptor_63210f2cf5891c5d = []byte{
	// 249 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x18, 0x84, 0xe3, 0xd0, 0x56, 0x60, 0x24, 0x06, 0x8b, 0xc1, 0x80, 0x64, 0x45, 0x4c, 0x9d, 0x6c,
	0x85, 0xbe, 0x01, 0x2c, 0x2c, 0x2c, 0x1d, 0xd9, 0x1c, 0xd7, 0x34, 0x11, 0x8d, 0xff, 0xaa, 0xfe,
	0x83, 0xca, 0x33, 0xb0, 0xf0, 0x58, 0x8c, 0x19, 0x19, 0x51, 0xf2, 0x22, 0x28, 0x76, 0x86, 0x66,
	0xfb, 0xef, 0x74, 0xfa, 0x4e, 0xf7, 0xd3, 0x3b, 0x8f, 0x1a, 0xad, 0x29, 0xb5, 0x73, 0x76, 0xa7,
	0x4a, 0xed, 0xcb, 0x1d, 0x98, 0x77, 0xb9, 0x3f, 0x00, 0x02, 0xcb, 0x10, 0x37, 0x8d, 0xdb, 0xca,
	0xd3, 0xcc, 0x44, 0xdc, 0x0a, 0x03, 0xbe, 0x06, 0xaf, 0x0a, 0xed, 0xad, 0xfa, 0xc8, 0x0b, 0x8b,
	0x3a, 0x57, 0x06, 0x2a, 0x17, 0x09, 0xf7, 0x5f, 0x84, 0x9e, 0x3f, 0x8f, 0x50, 0x76, 0x4d, 0xe7,
	0x95, 0xdb, 0xd8, 0x23, 0x27, 0x19, 0x59, 0x5e, 0xac, 0xa3, 0x60, 0x8c, 0xce, 0xde, 0x0e, 0x50,
	0xf3, 0x34, 0x98, 0xe1, 0x66, 0x57, 0x34, 0x45, 0xe0, 0x67, 0xc1, 0x49, 0x11, 0x58, 0x4e, 0x17,
	0xba, 0x86, 0xc6, 0x21, 0x9f, 0x65, 0x64, 0x79, 0xf9, 0x70, 0x23, 0x63, 0xaf, 0x1c, 0x7a, 0xe5,
	0xd8, 0x2b, 0x9f, 0xa0, 0x72, 0xeb, 0x31, 0x38, 0x60, 0x87, 0x35, 0x7c, 0x1e, 0xb1, 0xc3, 0xfd,
	0xf8, 0xf2, 0xd3, 0x09, 0xd2, 0x76, 0x82, 0xfc, 0x75, 0x82, 0x7c, 0xf7, 0x22, 0x69, 0x7b, 0x91,
	0xfc, 0xf6, 0x22, 0x79, 0x5d, 0x6d, 0x2b, 0x2c, 0x9b, 0x42, 0x1a, 0xa8, 0x55, 0x1c, 0xad, 0x26,
	0x8f, 0x39, 0x4e, 0x25, 0x7e, 0xee, 0xad, 0x2f, 0x16, 0x61, 0xe3, 0xea, 0x3f, 0x00, 0x00, 0xff,
	0xff, 0xf4, 0x49, 0x53, 0x9c, 0x44, 0x01, 0x00, 0x00,
}

func (m *Hashlock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Hashlock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Hashlock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Hash) > 0 {
		i -= len(m.Hash)
		copy(dAtA[i:], m.Hash)
		i = encodeVarintHashlock(dAtA, i, uint64(len(m.Hash)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintHashlock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintHashlock(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintHashlock(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintHashlock(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintHashlock(dAtA []byte, offset int, v uint64) int {
	offset -= sovHashlock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Hashlock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovHashlock(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovHashlock(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovHashlock(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovHashlock(uint64(l))
	}
	l = len(m.Hash)
	if l > 0 {
		n += 1 + l + sovHashlock(uint64(l))
	}
	return n
}

func sovHashlock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozHashlock(x uint64) (n int) {
	return sovHashlock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Hashlock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowHashlock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Hashlock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Hashlock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHashlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHashlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHashlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHashlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHashlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHashlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthHashlock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthHashlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Hash", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowHashlock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthHashlock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthHashlock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Hash = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipHashlock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthHashlock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipHashlock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowHashlock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHashlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowHashlock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthHashlock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupHashlock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthHashlock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthHashlock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowHashlock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupHashlock = fmt.Errorf("proto: unexpected end of group")
)
