// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: statechannel/timelock.proto

package types

import (
	fmt "fmt"
	types "github.com/cosmos/cosmos-sdk/types"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Timelock struct {
	Index       string      `protobuf:"bytes,1,opt,name=index,proto3" json:"index,omitempty"`
	From        string      `protobuf:"bytes,2,opt,name=from,proto3" json:"from,omitempty"`
	To          string      `protobuf:"bytes,3,opt,name=to,proto3" json:"to,omitempty"`
	Amount      *types.Coin `protobuf:"bytes,4,opt,name=amount,proto3" json:"amount,omitempty"`
	BlockHeight uint64      `protobuf:"varint,5,opt,name=blockHeight,proto3" json:"blockHeight,omitempty"`
}

func (m *Timelock) Reset()         { *m = Timelock{} }
func (m *Timelock) String() string { return proto.CompactTextString(m) }
func (*Timelock) ProtoMessage()    {}
func (*Timelock) Descriptor() ([]byte, []int) {
	return fileDescriptor_e11e2f1713a22079, []int{0}
}
func (m *Timelock) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Timelock) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Timelock.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Timelock) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Timelock.Merge(m, src)
}
func (m *Timelock) XXX_Size() int {
	return m.Size()
}
func (m *Timelock) XXX_DiscardUnknown() {
	xxx_messageInfo_Timelock.DiscardUnknown(m)
}

var xxx_messageInfo_Timelock proto.InternalMessageInfo

func (m *Timelock) GetIndex() string {
	if m != nil {
		return m.Index
	}
	return ""
}

func (m *Timelock) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

func (m *Timelock) GetTo() string {
	if m != nil {
		return m.To
	}
	return ""
}

func (m *Timelock) GetAmount() *types.Coin {
	if m != nil {
		return m.Amount
	}
	return nil
}

func (m *Timelock) GetBlockHeight() uint64 {
	if m != nil {
		return m.BlockHeight
	}
	return 0
}

func init() {
	proto.RegisterType((*Timelock)(nil), "ttdung.statechannel.statechannel.Timelock")
}

func init() { proto.RegisterFile("statechannel/timelock.proto", fileDescriptor_e11e2f1713a22079) }

var fileDescriptor_e11e2f1713a22079 = []byte{
	// 259 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x54, 0x90, 0xb1, 0x4e, 0xc3, 0x30,
	0x18, 0x84, 0xeb, 0x90, 0x56, 0xe0, 0x4a, 0x0c, 0x16, 0x43, 0x00, 0xc9, 0x8a, 0x98, 0x32, 0xd9,
	0x0a, 0x7d, 0x03, 0x58, 0x58, 0x58, 0x22, 0x26, 0xb6, 0xd8, 0x35, 0x89, 0x45, 0xed, 0xbf, 0xaa,
	0xff, 0xa0, 0xf2, 0x16, 0xac, 0xbc, 0x11, 0x63, 0x47, 0x46, 0x94, 0xbc, 0x08, 0x6a, 0x92, 0xa1,
	0xd9, 0xfe, 0x3b, 0x9d, 0xee, 0xd3, 0x7f, 0xf4, 0x36, 0x60, 0x89, 0x46, 0xd7, 0xa5, 0xf7, 0x66,
	0x23, 0xd1, 0x3a, 0xb3, 0x01, 0xfd, 0x2e, 0xb6, 0x3b, 0x40, 0x60, 0x29, 0xe2, 0xba, 0xf1, 0x95,
	0x38, 0xcd, 0x4c, 0xc4, 0x0d, 0xd7, 0x10, 0x1c, 0x04, 0xa9, 0xca, 0x60, 0xe4, 0x47, 0xae, 0x0c,
	0x96, 0xb9, 0xd4, 0x60, 0xfd, 0xd0, 0x70, 0xf7, 0x4d, 0xe8, 0xf9, 0xcb, 0x58, 0xca, 0xae, 0xe8,
	0xdc, 0xfa, 0xb5, 0xd9, 0x27, 0x24, 0x25, 0xd9, 0x45, 0x31, 0x08, 0xc6, 0x68, 0xfc, 0xb6, 0x03,
	0x97, 0x44, 0xbd, 0xd9, 0xdf, 0xec, 0x92, 0x46, 0x08, 0xc9, 0x59, 0xef, 0x44, 0x08, 0x2c, 0xa7,
	0x8b, 0xd2, 0x41, 0xe3, 0x31, 0x89, 0x53, 0x92, 0x2d, 0xef, 0xaf, 0xc5, 0xc0, 0x15, 0x47, 0xae,
	0x18, 0xb9, 0xe2, 0x11, 0xac, 0x2f, 0xc6, 0x20, 0x4b, 0xe9, 0x52, 0x1d, 0xa9, 0x4f, 0xc6, 0x56,
	0x35, 0x26, 0xf3, 0x94, 0x64, 0x71, 0x71, 0x6a, 0x3d, 0x3c, 0xff, 0xb4, 0x9c, 0x1c, 0x5a, 0x4e,
	0xfe, 0x5a, 0x4e, 0xbe, 0x3a, 0x3e, 0x3b, 0x74, 0x7c, 0xf6, 0xdb, 0xf1, 0xd9, 0xeb, 0xaa, 0xb2,
	0x58, 0x37, 0x4a, 0x68, 0x70, 0x72, 0x98, 0x40, 0x4e, 0x66, 0xda, 0x4f, 0x25, 0x7e, 0x6e, 0x4d,
	0x50, 0x8b, 0xfe, 0xe3, 0xd5, 0x7f, 0x00, 0x00, 0x00, 0xff, 0xff, 0xe2, 0xdb, 0x62, 0xbf, 0x52,
	0x01, 0x00, 0x00,
}

func (m *Timelock) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Timelock) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Timelock) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BlockHeight != 0 {
		i = encodeVarintTimelock(dAtA, i, uint64(m.BlockHeight))
		i--
		dAtA[i] = 0x28
	}
	if m.Amount != nil {
		{
			size, err := m.Amount.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTimelock(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if len(m.To) > 0 {
		i -= len(m.To)
		copy(dAtA[i:], m.To)
		i = encodeVarintTimelock(dAtA, i, uint64(len(m.To)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintTimelock(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Index) > 0 {
		i -= len(m.Index)
		copy(dAtA[i:], m.Index)
		i = encodeVarintTimelock(dAtA, i, uint64(len(m.Index)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func encodeVarintTimelock(dAtA []byte, offset int, v uint64) int {
	offset -= sovTimelock(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Timelock) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Index)
	if l > 0 {
		n += 1 + l + sovTimelock(uint64(l))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovTimelock(uint64(l))
	}
	l = len(m.To)
	if l > 0 {
		n += 1 + l + sovTimelock(uint64(l))
	}
	if m.Amount != nil {
		l = m.Amount.Size()
		n += 1 + l + sovTimelock(uint64(l))
	}
	if m.BlockHeight != 0 {
		n += 1 + sovTimelock(uint64(m.BlockHeight))
	}
	return n
}

func sovTimelock(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTimelock(x uint64) (n int) {
	return sovTimelock(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Timelock) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTimelock
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Timelock: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Timelock: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Index", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimelock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimelock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Index = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimelock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimelock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field To", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTimelock
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTimelock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.To = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTimelock
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTimelock
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Amount == nil {
				m.Amount = &types.Coin{}
			}
			if err := m.Amount.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BlockHeight", wireType)
			}
			m.BlockHeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTimelock
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.BlockHeight |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipTimelock(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTimelock
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTimelock(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTimelock
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimelock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTimelock
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTimelock
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTimelock
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTimelock
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTimelock        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTimelock          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTimelock = fmt.Errorf("proto: unexpected end of group")
)
